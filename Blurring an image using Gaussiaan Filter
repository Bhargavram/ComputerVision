import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
from PIL import Image
import time


# creating the filter
# def filt(filter_size,sigma):
#     gaussian_filter = np.zeros((filter_size, filter_size), np.float32)
#     for i in range(filter_size):
#         for j in range(filter_size):
#             x = i - filter_size // 2
#             y = j - filter_size // 2
#             gaussian_filter[i, j] = (-1) / (2 * np.pi * sigma ** 2) * np.exp(-(x ** 2 + y ** 2)/(2 * sigma ** 2))
# # print(gaussian_filter.sum())
#     return gaussian_filter

def filt(shape, sigma):
    m, n = [(ss - 1.) / 2. for ss in shape]
    y, x = np.ogrid[-m:m + 1, -n:n + 1]
    h = np.exp(-(x * x + y * y) / (2. * sigma * sigma))
    h[h < np.finfo(h.dtype).eps * h.max()] = 0
    sumh = h.sum()
    if sumh != 0:
        h /= sumh
    return h
# convolution
def convol(image, kernel):
    m, n = kernel.shape
    y, x = image.shape
    y1, x1 = image.shape
    new_image = np.zeros((y1, x1))
    temp1 = np.zeros([y, int(m / 2)])
    image = np.append(image, temp1, axis=1)
    image = np.append(temp1, image, axis=1)
    y, x = image.shape
    temp2 = np.zeros([int(m / 2), x])
    image = np.append(image, temp2, axis=0)
    image = np.append(temp2, image, axis=0)
    for i in range(y1):
        for j in range(x1):
            new_image[i][j] = np.sum(image[i:i + m, j:j + m] * kernel)
    return new_image


def rgb2gray(rgb):
    return np.dot(rgb[..., :3], [0.299, 0.587, 0.114])


def GaussianBlurImage(image, sigma):
    t1 = time.time()
    img = mpimg.imread(image)
    gray = rgb2gray(img)
    filter_size = 2 * int(sigma * 4 + 0.5) + 1
    fil = filt((filter_size,filter_size), sigma)
    ans = convol(gray, fil)
    print("after covolution", ans.shape)
#     plt.imshow(ans)
#     plt.show()
    ans = ans*255/ans.max()
    #ans+=128
    img_new = Image.fromarray(ans)
    # img_new = img_new.convert("L")
    img_new = img_new.convert("RGB")
    fp = open("1.png", "wb")
    img_new.save(fp)
    print("for this sigma", sigma," ",time.time()-t1)
    # plt.imshow(img_new)
    # plt.show()
    # file = open("1.png","w")
    # plt.savefig("1.png")
    # img_new.save(file)
